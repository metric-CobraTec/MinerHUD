{"slots":{"0":{"name":"container","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- prepare counters for our loop\ntotalOreValue = 0\ntotalOreLiters = 0\ntotalOreKg = 0\nexcludeLiters = 0\n\njsonContainer = json.decode(container.getItemsList())\n-- loop through our item list\nfor k, v in ipairs(jsonContainer) do\n    -- search item ore class\n    if dataOre[v[\"class\"]] ~= nil then        \n        totalOreValue = totalOreValue + (dataOre[v[\"class\"]] * v[\"quantity\"])\n        totalOreLiters = totalOreLiters + v[\"quantity\"]\n        totalOreKg = totalOreKg + (v[\"unitMass\"] * v[\"quantity\"])\n       -- system.print(\"TOTAL ORE VALUE FROM DATAORE:\" .. totalOreValue)\n    else\n        -- count unrelated liters\n        excludeLiters = excludeLiters + (v[\"quantity\"] * v[\"unitVolume\"])\n    end \nend\n\n-- handle exclude liters\nminusLiters = excludeLiters\n\nacquireStorageStatus = true","filter":{"args":[],"signature":"storageAcquired()","slotKey":"0"},"key":"0"},{"code":"-- Important! - If using remote controller, set to \"true\"\n-- this will prevent your vessel from being launched into the air when mining underwater\n\n-- USER SETTINGS\n-- Overwrite default settings to your requirements\nsettings = {\n    remoteController = true,    -- set \"true\" if using remote controller, othewise \"false\"\n    themeDefault = false,\t   -- set ONE theme, true or false\n    themeOrange = true,\t       -- ..\n    themeRed = false,\t\t  -- ..\n    themeCyan = false,  \t   -- ..\n    themeTriangleColor = true,  -- enable triangle colors distance meter \n    linkedRange = 1000,\t\t  -- set your maximum linked container range in meters\n    unitRange = 1000,\t\t  -- set your maximum unit range\n    oreIndication = 16,\t       -- set ore indication value/price\n    targetMaximumWeight = 10000,-- set container maximum weight in Kg (includes elements, scrap etc..)\n    targetLiters = 10000,\t   -- set target in liters for alert, 0 for no target\n    targetOreIndication = 10000,-- set target quanta indication for alert, 0 for no target\n    targetOreTotalValue = 10000 -- set actual total ore value based on provided tier1/5 settings\n}\n\n-- USER ORE DATA SETTINGS\n-- DEFAULT ORE VALUES FROM DUAL.SH\n--------------------------------------------\ndataOre = {\n    -- tier 1\n    AluminiumOre = 16.00, --bauxite\n    CarbonOre = 16.00,\t--coalOre\n    IronOre = 16.00,\t--hematite\n    SiliconOre = 16.00,\t--quartz\n    --tier 2\n    ChromiumOre = 40.00,\t--chromite\n    CalciumOre = 40.00,\t--limestone\n    CopperOre = 40.00,\t--malachite\n    SodiumOre = 40.00,\t--natron\n    --tier 3\n    SilverOre = 200.00,\t--acanthite\n    NickelOre = 200.00,\t--garnierite\n    LithiumOre = 200.00,\t--petalite\n    SulfurOre = 200.00,\t--pyrite\n    --tier 4\n    FluorineOre = 600.00,\t--cyrolite\n    CobaltOre = 600.00,\t--cobaltite\n    ScandiumOre = 600.00, --kolbeckite\n    GoldOre = 600.00,\t--goldnuggets\n    --tier 5\n    NiobiumOre = 1000.00,\t--columbite\n    TitaniumOre = 1000.00, --illmenite\n    ManganeseOre = 1000.00,--rhodonite\n    placeholder = 1000.00, --thoramine\n    VanadiumOre = 1000.00\t--vanadinite\n}\n\n-- PROTECTED  --  PROTECTED  ---  PROTECTED  --  PROTECTED !!! \n--------------------------------------------------------------\n-- !!! DO NOT ALTER FROM HERE - DO NOT ALTER FROM HERE !!!\n--------------------------------------------------------------\n-- PROTECTED  --  PROTECTED  ---  PROTECTED  --  PROTECTED !!! \n\n-- PROTECTED \n-- Theme settings\ntheme = {\n    themeDefaultPri = \"transparant\",\n    themeDefaultSec = \"transparant\",\n    themeOrangePri = \"255, 145, 0\",\n    themeOrangeSec = \"71, 41, 0\",\n    themeRedPri = \"255, 82, 82\",\n    themeRedSec = \"87, 29, 29\",\n    themeCyanPri = \"0, 238, 255\",\n    themeCyanSec = \"0, 64, 69\",\n    triangleColorUp = \"dodgerblue\",\n    triangleColorDown = \"red\"\n}\n\n-- PROTECTED \n-- flag targets for processed\ninternalDatabase= {\n    targetMaximumWeight = false,\n    targetLiters = false,\n    targetOreIndication = false,\n    targetOreTotalValue = false\n}\n\n-- PROTECTED\n-- initiate experimental panel\n---------------------------------------\n-- initiate experimental panel\ndisplayHudPanel = true\n\nAlertTerritoryScanner = false\nAlertTerritoryScannerCounter = 5\nAlertTerritoryScannerCountdown = 0\n\nliters = 0\nquanta = 0\n\nacquireStorageCounter = 1\ntotalOreValue = 0\n\nminingTargetValue = 1000\n----------------------------\n-- PROTECTED\n-- initiate territory scanner messages\ndisplayTerritoryScannerRunning = ''\ndisplayTerritoryScannerAlert = ''\n\n-- initiate flush\ninitiate = false\n\n-- initiate settings\nalarm = nil\nalarmClock = 0\nseconds = 0\n\n-- current version\nversion = '2.00'\n\nminusLiters = 0 \n-- initiate export settings\n--maximumKG = 1000000 --export: set maximum container kg for transport\n\n\n-- Detect and set user primary theme colors\n------------------------------------------\nif settings[\"themeDefault\"] == true then\n    colorPrimary = theme[\"themeDefaultPri\"]\n    colorSecondary = theme[\"themeDefaultSec\"]\nelseif settings[\"themeOrange\"] == true then\n    colorPrimary = theme[\"themeOrangePri\"]\n    colorSecondary = theme[\"themeOrangeSec\"]\nelseif settings[\"themeRed\"] == true then\n    colorPrimary = theme[\"themeRedPri\"]\n    colorSecondary = theme[\"themeRedSec\"]\nelseif settings[\"themeCyan\"] == true then\n    colorPrimary = theme[\"themeCyanPri\"]\n    colorSecondary = theme[\"themeCyanSec\"]\nelse\n    colorPrimary = theme[\"themeDefaultPri\"]\n    colorSecondary = theme[\"themeDefaultSec\"]\nend\n\n-- Detect and set triangle color\n------------------------------------------\n\nif settings[\"themeTriangleColor\"] == true then\n    triangleColorUp = theme[\"triangleColorUp\"]\n    triangleColorDown = theme[\"triangleColorDown\"]\nelse\n    triangleColorUp = \"white\"\n    triangleColorDown = \"white\"\nend\n\n-- DISPLAY UNIT PANEL\n------------------------------------------\n-- hide default controller unit panel\nunit.hide()\n\n-- set our default panel name\npanelName = \"MINERHUD\"\n\n-- create panel\npanelId = system.createWidgetPanel(panelName)\n\n-- create version widget\nversionId = system.createWidget(panelId, \"value\")\nversionData = '{\"label\": \"Version\", \"unit\": \"\", \"value\": \"' .. version .. '\"}'\nversionData = system.createData(versionData)\nsystem.addDataToWidget(versionData, versionId)\n\n-- create update location widget\nversionId = system.createWidget(panelId, \"value\")\nversionData = '{\"label\": \"github.com/metric-CobraTec\", \"unit\": \"\", \"value\": \"\"}'\nversionData = system.createData(versionData)\nsystem.addDataToWidget(versionData, versionId)\n\n-- create countdown widget\nhideId = system.createWidget(panelId, \"value\")\nhideIdData = '{\"label\": \"Panel will hide in:\", \"unit\": \"\", \"value\": \"\"}'\nhideIdData = system.createData(hideIdData)\nsystem.addDataToWidget(hideIdData, hideId)\n\n-- START REQUIRED TIMERS\n------------------------------------------\n-- start boot screen\nunit.setTimer(\"version\", 1)\n\n-- start timer\nself.setTimer('update',1)","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"seconds = seconds + 1\n\n-- request call to container storage\nacquireStorageCounter = acquireStorageCounter - 1\nif acquireStorageCounter == 0 then\n    acquireStorageStatus = false\n    acquireStorageCounter = 60\n    container.acquireStorage()\nend\n\n-- handle target and show alert\nfunction targetHandler(target,current)\n    local target = target\n    local current = current \n    if current >= target and target ~= 0 then       \n        if internalDatabase[\"target\"] == false then\n            -- enable hud panel for user\n            displayHudPanel = true\n            -- set internalDatabase as flagged\n            internalDatabase[\"target\"] = true\n            end        \n\t\t-- activate alert on screen\n        --system.print(\"ALERT: TARGET REACHED\")\n        return \"background-color:red;color:white;opacity:0.5;\"\n        else\n      return \"\"  \n    end  \nend\n\n-- format seconds to clock\nfunction SecondsToClock(seconds)\n    local seconds = tonumber(seconds)\n    if seconds <= 0 then\n        return \"00:00:00\";\n    else\n        hours = string.format(\"%02.f\", math.floor(seconds/3600));\n        mins = string.format(\"%02.f\", math.floor(seconds/60 - (hours*60)));\n        secs = string.format(\"%02.f\", math.floor(seconds - hours*3600 - mins *60));\n        return hours..\":\"..mins..\":\"..secs\n    end\nend\n\n-- number to thousands\nfunction format_thousand(v)\n    local s = string.format(\"%d\", math.floor(v))\n    local pos = string.len(s) % 3\n    if pos == 0 then pos = 3 end\n    return string.sub(s, 1, pos)\n    .. string.gsub(string.sub(s, pos+1), \"(...)\", \",%1\")\n    .. string.sub(string.format(\"%.2f\", v - math.floor(v)), 2)\nend\n\ntimestamp = system.getTime()\nliters = container.getItemsVolume() - minusLiters\n\n\nif settings[\"oreIndication\"] > 0 then\n    value = liters * settings[\"oreIndication\"]\nelse\n    value = 0\nend\n\ncontainer = container.getItemsMass()\n\n-- fix wrong hub container information\nkg = container or 0\n-- temp\nif liters == 0 then\n   -- kg = 0\nend\n\nton = kg / 1000 or 0\nkton = kg / 1000000 or 0\n\n-- temp\nif ton < 0.1 then\n  --  ton = 0\nend\n\n-- temp\nif kg < 100 then\n  --  kton = 0\nend\n\n\n-- correct liters\nif liters < 0 then\n    liters = 0\nend\nif value < 0 then\n    value = 0\nend\n\n-- temp\n--seconds = seconds + 1\n\ninjectAlarmClock = ''\nif alarm == true then\n    alarmClock = alarmClock + 1\nend\n\n-- temp\nif alarm == true then\n   -- injectAlarmClock = '<div class=\"container alert-orange\">ALERT: Countdown Activated!</div>'\nend\n\n-- temp\n-- alarm clock countdown sec\nif alarmClock >= 10 and alarm == true then\n   -- injectAlarmClock = '<div class=\"container alert-red\">ALERT: Territory Scan Complete!</div>'\nend\n\nfunction getTime(seconds)\n    if seconds >= 60 then\n        period = 'Minutes'\n        time = seconds / 60        \n else\n        period = 'Seconds'\n        time = seconds\n    end\n    return period, time \nend\n\n-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\n-- player distance from unit\nlocal player = vec3(unit.getMasterPlayerRelativePosition()):len()\n\n-- get percentage player distance from unit\nper = (player / settings[\"unitRange\"]) * 100\n-- get percentage player distance from linked container\nremainingLinkedRangePer = (player / settings[\"linkedRange\"]) * 100\n\n-- limit percentage linked container up to 100\nif remainingLinkedRangePer > 100 then\n    remainingLinkedRangePer = 100\nend\n-- limit lower percentage linked container to 0  \nif remainingLinkedRangePer < 1 then\n    remainingLinkedRangePer = 0\nend\n\n-- limit percentage linked container up to 100\nif per > 100 then\n    per = 100\nend\n-- limit lower percentage linked container to 0  \nif per < 1 then\n    per = 0\nend\n\n-- CSS Validator Results: valid, no errors\n-- HTML Validator Results: Valid, basic\nhtml = [===[\n<style> \nbody{\nopacity: 0.8;\n}\n.title{\ntop:0;\nleft:0;\nright:0;\nposition:fixed;\n}\n.logo{\nfont-size:0.5vw;\nfont-weight: bold;\npadding-left:1vw;\n}    \n.container{\nmax-width:50vw;\nfont-size:0.5vw;\ncolor:rgb(255, 145, 0);\nbackground-color:rgb(71, 41, 0);\nborder:0.2vw solid rgb(255, 145, 0);\npadding:0.5vw;\n} \n.row{\nbackground-color:rgb(]===]..  colorSecondary ..[===[);\ncolor:rgb(]===]..  colorPrimary ..[===[);\nborder-bottom:0.2vw solid rgb(]===]..  colorPrimary ..[===[);\n}\n.row:after {\ncontent: \"\";\ndisplay: table;\nclear: both;\n}\n.column {\nfloat: left;\nwidth: 14%;\nfont-size:0.7vw;\n}\n.column span{\nmargin-left:1vw;\nopacity: 0.5;\n} \n.alert-red{\ncolor:rgb(255, 82, 82);\nbackground-color:rgb(87, 29, 29);\nborder:1px solid rgb(255, 82, 82);\nmargin-bottom:0.5vw;\nmax-width:200px;\n}\n.alert-orange{\ncolor:rgb(255, 145, 0);\nbackground-color:rgb(71, 41, 0);\nborder:1px solid rgb(255, 145, 0);\nmargin-bottom:0.5vw;\nmax-width:200px;\n}\n\n/* OUR DISTANCE METER HUD COMPONENT */\n.distance-meter{\ntext-align:right;\ncolor:white;\nmax-width:25vw;\nopacity:0.5;\nmargin: 0 auto;\n}  \n.linked-range{\nborder-left:1px solid white;\nborder-right:1px solid white;\nborder-bottom:1px solid white;\nposition:relative;\n} \n.unit-range{\nborder-left:1px solid white;\nborder-right:1px solid white;\nposition:relative;\n}  \n.triangle-down{\nposition:absolute;\nleft:0;\nmargin-left:-6px;\n/*color:red;*/\ncolor:]===] .. triangleColorDown .. [===[;\n\n}  \n.triangle-up{\nposition:absolute;\nmargin-left:-6px;\n/*color:dodgerblue;*/\ncolor:]===] .. triangleColorUp .. [===[;\n\n}\n\n\n/* FLUSH TEST */\n  .outliner{\n  position:absolute;\n  left:100%;\n  top:0;\n  right:0;\n  display:inline-block;\n  width:100%;\n  text-align:left;\n  margin-left:10px;\n  }\n</style>\n\n<div class=\"row title\">\n<div class=\"logo column\">MinerHud</div>\n<div class=\"column\">]===]..  string.format(\"%.2f\", kton) ..[===[<span>Kt</span></div>\n<div class=\"column\">]===]..  string.format(\"%.2f\", ton) ..[===[<span>T</span></div>\n<div class=\"column\">]===]..  format_thousand(kg) ..[===[<span>Kg</span></div>\n<div class=\"column\">]===]..  format_thousand(liters) ..[===[<span>L</span></div>\n<div class=\"column\">]===]..  format_thousand(value) ..[===[<span>Quanta</span></div>\n<div class=\"column\">]===]..  SecondsToClock(seconds) ..[===[<span>Elapsed Time</span></div>\n</div>\n\n<div class=\"distance-meter\">\n    <div class=\"linked-range\">\n    <div class=\"triangle-up\" style=\"padding-left:]===] .. string.format(\"%.f\",remainingLinkedRangePer) .. [===[%;\">&#9660;</div>\n  <!-- FLUSH TEST-->\n<div class=\"outliner\" style=\"\">]===] .. string.format(\"%.f\",player) .. [===[/]===]..  settings[\"linkedRange\"] ..[===[ Linked Range</div>\n<span>&nbsp;</span>\n</div>\n    <div class=\"unit-range\">\n    <div class=\"triangle-down\" style=\"padding-left:]===] .. string.format(\"%.f\",per) .. [===[%;\">&#9650;</div>\n   <div class=\"outliner\" style=\"\">]===] .. string.format(\"%.f\",player) .. [===[/]===]..  settings[\"unitRange\"] ..[===[ Unit Range</div>\n<span>&nbsp;</span>\n</div>\n</div>\n]===]\n--html = html .. inject\nhtml = html .. injectAlarmClock\n\n-- temp\n--if totalOreValue >= miningTargetValue then\n--    system.print('miningTargetValue' .. miningTargetValue)\n--    system.print('totalOreValue' .. totalOreValue)\n--    system.print('Mining target reached!')\n--end\n\n-- user enabled territory scanner\nif AlertTerritoryScanner == true then\n    -- enable running alert to display for user\n    displayTerritoryScannerRunning = 'background-color:orange;color:white;opacity:0.5;'\n    --displayTerritoryScannerAlert = 'display:none;'\n    AlertTerritoryScannerCountdown = AlertTerritoryScannerCountdown + 1\n    if AlertTerritoryScannerCountdown == 900 then\n        displayHudPanel = true\n        displayTerritoryScannerRunning = ''\n        displayTerritoryScannerAlert = 'background-color:green;color:white;opacity:0.5;'\n        system.print(\"target reached\")\n        AlertTerritoryScanner = false\n        -- temp\n        --AlertTerritoryScannerCountdown = true\n        --AlertTerritoryScannerTimer = 5\n    end\nelse\n    -- temp\n    -- displayTerritoryScannerRunning = ''\n    --displayTerritoryScannerAlert = ''\nend \n    \n-- calculate liters per sec\nlitersSec = string.format(\"%.2f\",liters/seconds)\n-- calculate quanta per sec\nquantaSec = format_thousand(value/seconds)\n\n\n-- handle feedback\nif acquireStorageStatus == true then\n    acquireStorageStatusDisplay = '<div>&nbsp;</div>' \nelse\n    acquireStorageStatusDisplay = '<div style=\"background-color:black;color:red;\">Loading: Standby..</div>'\nend\n\n\ninjectExperimentalModule = [===[\n<style>\n.scene {\ntop:0;\nleft:0;\nright:0;\nposition:fixed;\n\n    width: 400px;\n    margin: 1vw;\n    margin-top:8vw;\n}\n.panel {\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0.3);\n    /* perspective function in transform property */\n   /* transform: perspective(800px) rotateY(25deg);*/\n    transform: perspective(600px) rotateY(45deg);\n    padding:1vw;\n}\n.panel-title{\n    border-bottom:2px solid orange;\n    margin-bottom:1vw;\n    font-weight: bold;\n    position:relative;\n}\n.panel-alert{\n    margin-bottom:1vw;\n    font-weight: bold;\n    text-align:center;\n    font-size:16px;\n    padding:2px;\n    background-color:grey;\n    opacity:0.3;\n    border-radius:3px;\n\n}\ntd{\n    font-size:1.5vw;\n    text-align:center;\n}\n.alert{\n    color:white;\n    border-bottom:2px solid black;\n    margin-bottom:1vw;\n\n}\ntable{\n\tmargin-bottom:1vw;\n}\n</style>\n\n<div class=\"scene\">\n<div class=\"panel\">\n<div class=\"panel-title\" style=\"\">MINERHUD EXPERIMENTAL MODULE</div>\n\n  <div class=\"panel-title\">PERFORMANCE INDICATORS PER SECOND</div>\n  <table style=\"width: 100%;\" >\n    <tbody>\n      <tr>\n        <td>Liters</td>\n        <td>Quantas</td>\n      </tr>\n      <tr>\n        <td>]===] .. litersSec .. [===[</td>\n        <td>]===] .. quantaSec .. [===[</td>\n      </tr>\n    </tbody>\n  </table>\n  \n  <div class=\"panel-title\">Total Ore Value</div>\n<div style=\"border:1px solid orange;  margin-bottom:1vw;position:relative;\">\n<div style=\"position:absolute;right:0;top:100%;font-size:1vw;margin-top:3px;\">]===] .. acquireStorageStatusDisplay .. [===[</div>\n<div style=\"margin:1vw;font-size:1.5vw;text-align:center;\">]===] .. format_thousand(totalOreValue) .. [===[</div> \n<div style=\"background-color:orange;color:black;text-align:center;padding:0.2vw;font-size:1vw;opacity:0.5;\">REFRESH IN ]===] .. acquireStorageCounter .. [===[ SEC</div> \n\n</div>\n  \n\n<div class=\"panel-title\">ALERTS</div>\n<div class=\"panel-alert\" style=\"]===] .. displayTerritoryScannerAlert .. [===[\">\nTerritory Scan Completed!<br></div>\n\n<div class=\"panel-alert\" style=\"]===] .. displayTerritoryScannerRunning .. [===[\">\nTerritory Scan Running!</div>\n\n<div class=\"panel-alert\" style=\"]===] .. targetHandler(settings[\"targetLiters\"],liters) .. [===[\">\nTarget Liters Reached</div>\n\n<div class=\"panel-alert\" style=\"]===] .. targetHandler(settings[\"targetOreIndication\"],value) .. [===[\">\nTarget Ore Value Indication Reached</div>\n\n<div class=\"panel-alert\" style=\"]===] .. targetHandler(settings[\"targetOreTotalValue\"],totalOreValue) .. [===[\">\nTarget Total Ore Value Reached</div>\n\n<div class=\"panel-alert\" style=\"]===] .. targetHandler(settings[\"targetMaximumWeight\"],kg) .. [===[\">\nMaximum Container Weight Reached!</div>\n\n</div>\n</div>\n]===]\n\nif displayHudPanel ~= true then\n    injectExperimentalModule = ''\nend\n\n-- inject our experimental module\nhtml = html .. injectExperimentalModule\n\nsystem.setScreen(html)\nsystem.showScreen(1)","filter":{"args":[{"value":"update"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"-- Display bottom right corner version number panel\n---------------------------------------------------\nif counter == nil then\n    counter = 10\nend\n--system.print(counter)\n\ncounter = counter - 1\n\n--system.print(counter)\ndataJson = '{\"label\": \"Panel will hide in:\", \"unit\": \"\", \"value\": \"' .. counter .. '\"}'\nsystem.updateData(hideIdData, dataJson)\n\nif counter == 0 then\n    unit.stopTimer(\"version\", 1)\n    system.destroyWidgetPanel(panelId)\n   -- system.print(\"exit panel and terminate\")\nend","filter":{"args":[{"value":"version"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"-- check if control unit is remote and set engines\nif remoteController == true and initiate == false then\n    -- disable all engines\n    -- current working setup, pending further improvement\n    unit.deactivateGroundEngineAltitudeStabilization()    \n    unit.setEngineCommand(\"ALL\",{0,0,0},{0,0,0},0,0,'','','',0)\n    -- re-disable adjusters\n    unit.setEngineCommand(\"adjustor\",{0,0,0},{0,0,0},0,0,'','','',0)\n    -- Additional: set force thrust\n    unit.setEngineThrust (\"ALL\", 0)\n    unit.setEngineThrust (\"adjustor\", 0)\n    initiate = true\nend","filter":{"args":[],"signature":"flush()","slotKey":"-2"},"key":"4"},{"code":"-- switch start territory scanner ON\nAlertTerritoryScanner = true\n-- initate countdown value\nAlertTerritoryScannerCountdown = 0","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"5"},{"code":"-- toggle displaying experimental hud\nif displayHudPanel == true then\n    displayHudPanel = false\nelse\n    displayHudPanel = true\nend","filter":{"args":[{"value":"option2"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"6"}],"methods":[],"events":[]}
